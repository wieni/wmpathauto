<?php

use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\Entity\TranslatableInterface;
use Drupal\wmpathauto\Entity\EntityAliasDependency;
use Drupal\wmpathauto\Plugin\QueueWorker\EntityAliasDependencyQueueWorker;

function wmpathauto_install()
{
    wmpathauto_update_8003();
}

/**
 * Install entity_alias_dependency entity type
 */
function wmpathauto_update_8001()
{
    $updateManager = \Drupal::entityDefinitionUpdateManager();

    $entityType = new ContentEntityType([
        'id' => 'entity_alias_dependency',
        'base_table' => 'entity_alias_dependency',
        'translatable' => false,
        'entity_keys' => [
            'id' => 'did',
        ],
    ]);

    $definitions = EntityAliasDependency::baseFieldDefinitions($entityType);

    $updateManager->installFieldableEntityType($entityType, $definitions);
}

/**
 * Remove unused key_value entries
 */
function wmpathauto_update_8002()
{
    \Drupal::database()
        ->delete('key_value')
        ->condition('collection', 'wmpathauto%', 'LIKE')
        ->execute();
}

/**
 * Add dependencies for all existing entities
 */
function wmpathauto_update_8003()
{
    $entityTypeManager = \Drupal::entityTypeManager();
    $cache = \Drupal::getContainer()
        ->get('entity.memory_cache');
    $queue = \Drupal::queue(EntityAliasDependencyQueueWorker::ID);

    foreach (['node', 'taxonomy_term'] as $entityTypeId) {
        if (!$entityTypeManager->hasDefinition($entityTypeId)) {
            continue;
        }

        $storage = $entityTypeManager->getStorage($entityTypeId);
        $ids = $storage->getQuery()->accessCheck(false)->execute();

        foreach (array_chunk($ids, 20) as $chunk) {
            foreach ($storage->loadMultiple($chunk) as $entity) {
                $queue->createItem([
                    'id' => $entity->id(),
                    'type' => $entity->getEntityTypeId(),
                    'language' => $entity->language()->getId(),
                ]);

                if ($entity instanceof TranslatableInterface) {
                    foreach ($entity->getTranslationLanguages(false) as $language) {
                        $queue->createItem([
                            'id' => $entity->id(),
                            'type' => $entity->getEntityTypeId(),
                            'language' => $language->getId(),
                        ]);
                    }
                }
            }

            $cache->deleteAll();
        }
    }
}

/**
 * Install entity_alias_dependency base fields
 */
function wmpathauto_update_8004()
{
    $updateManager = \Drupal::entityDefinitionUpdateManager();

    $entityType = new ContentEntityType([
        'id' => 'entity_alias_dependency',
        'base_table' => 'entity_alias_dependency',
        'translatable' => false,
        'entity_keys' => [
            'id' => 'did',
        ],
    ]);

    $definitions = EntityAliasDependency::baseFieldDefinitions($entityType);

    foreach ($definitions as $name => $definition) {
        $updateManager->installFieldStorageDefinition(
            $name,
            $entityType->id(),
            'wmpathauto',
            $definition
        );
    }
}

/**
 * Change path dependencies to entity dependencies
 */
function wmpathauto_update_8005(): void
{
    $storage = \Drupal::entityTypeManager()
        ->getStorage('entity_alias_dependency');
    $cache = \Drupal::getContainer()
        ->get('entity.memory_cache');
    $ids = $storage->getQuery()
        ->condition('dependency_type', 'pid')
        ->accessCheck(false)
        ->execute();

    foreach (array_chunk($ids, 20) as $chunk) {
        /** @var EntityAliasDependency $dependency */
        foreach ($storage->loadMultiple($chunk) as $dependency) {
            $dependency->set('dependency_type', 'entity');
            $dependency->set('dependency_value', sprintf(
                'path_alias.%s.%s',
                $dependency->getDependencyValue(),
                $dependency->get('entity_language')->value
            ));
            $dependency->save();
        }

        $cache->deleteAll();
    }
}
